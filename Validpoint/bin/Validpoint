#!/usr/bin/env node

/**
 * CW website validator access hub.
 * 
 * Invoking: 
 * ./bin/Validpoint command (-d [domain1,[domain2,[domain3...]]])
 * See all commands and options:
 * ./bin/Validpoint help
 */

require( "strict-mode" )(
    () =>
    {
		// Get an instance of the runner
		const CW_Runner = require( "../../classes/CW_Runner.js" );
		const runner = new CW_Runner();

		// And an instance of the parser
		const CW_InputParser =  require( "../../classes/CW_InputParser.js" );
		let config = null;

		let inputOptions = CW_Runner.processinputArguments();
		let cmd = inputOptions.command;
		let domain = inputOptions.domain;

		CW_InputParser.makeRunnerObjects( domain ).then(
			( runObjects ) =>
			{
				if( runObjects && runObjects.length > 0 )
				{
					// The things that run in the forEach are synchronous, so checks for all domains run at once and return in no particular order
					runObjects.forEach(
						runObject =>
						{
							let parser = new CW_InputParser( runObject.file );

							parser.init(
								function() // init callback
								{
									try
									{
										// `this` is an instance of the InputParser
										config = this.parseJsonString();
					
										if( config == null )
										{
											// TODO: Warn more usefully and process.exit. There's no "up" from here, so throwing doesn't make sense unless we love javascript error output. Also, there will be no useful input, so we can't continue anyway
											throw new Error( "COULD NOT READ INPUT CONFIGURATION FILE. EXITING." );
										}

										let CW_Advice = require( "../../classes/CW_Advice.js" );
										let advice = new CW_Advice();
										runner.runCommand( { command: cmd, configObject: config, adviceObject: advice } )
											.then(
												(response) =>
												{
													console.log( response );
												}
											);
									}
									catch( exception ) // runCommand never receives rejections, so this will only be code or system errors - never test failures
									{
										console.log( "There was a problem running your command. The error reported was:" );
										console.log( exception );
										console.log( "Exiting now." );
										process.exit( 1 );
									}
								}
							);
						}
					);
				}
				else // We didn't get any JSON files for input
				{
					// TODO: Warn more usefully and process.exit. There's no "up" from here, so throwing doesn't make sense unless we love javascript error output. Also, there will be no useful input, so we can't continue anyway
					throw new Error( "COULD NOT FIND ANY CONFIGURATION FILES TO RUN." );
				}
			}
		);
	}
);
