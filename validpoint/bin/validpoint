#!/usr/bin/env node

/**
 * CW website validator access hub.
 * 
 * Invoking: 
 * ./bin/validpoint command (-d [domain1,[domain2,[domain3...]]])
 * See all commands and options:
 * ./bin/validpoint help
 */

require( "strict-mode" )(
    () =>
    {
		// Get an instance of the runner
		const CW_Runner = require( "../../classes/CW_Runner.js" );
		const runner = new CW_Runner();

		// And an instance of the parser
		const CW_InputParser =  require( "../../classes/CW_InputParser.js" );
		let config = null;

		let inputOptions = CW_Runner.processinputArguments()
			.then(
				( inputOptions ) =>
				{
					let cmds = inputOptions.command;
					let domains = inputOptions.domain;
					let inputDirectory = null;

					if( inputOptions.directory && inputOptions.directory.length > 0 )
					{
						inputDirectory = inputOptions.directory;
					}

					// Foreach domain
					domains.forEach(
						domain =>
						{
							// Foreach command
							cmds.forEach(
								command =>
								{
									// 1. make runner object(s)
									CW_InputParser.makeRunnerObjects( { domain: domain, directory: inputDirectory } )
										.then(
											( runObjects ) =>
											{
												runObjects.forEach(
													runObject =>
													{
														// 2. parse the input config file
														let parser = new CW_InputParser( runObject.file, runObject.directory );

														parser.init(
															function() // init callback
															{
																try
																{
																	config = this.parseJsonString();

																	config = 
																	{	...config,
																		show_raw: inputOptions.show_raw,
																		be_quiet: inputOptions.quiet
																	}

																	if( config == null )
																	{
																		throw new Error( "COULD NOT READ INPUT CONFIGURATION FILE. EXITING." );
																	}

																	// 3. Setup advice
																	let CW_Advice = require( "../../classes/CW_Advice.js" );
																	let advice = new CW_Advice();
																	// 4. runCommand
																	runner.runCommand( { command: command, configObject: config, adviceObject: advice } )
																		.then(
																			(response) =>
																			{
																				// 5. Display results
																				if( config.show_raw || config.be_quiet ) // will probably remove the be_quiet allowance here
																				{
																					console.log();
																					console.log( response );
																					console.log(); // Make a blank line for separation until we have nicer progressive output
																				}
																			}
																		);
																}
																catch( error ) // runCommand never receives rejections, so this will only be code or system errors - never test failures
																{
																	console.log( "There was a problem running your command. The error reported was:" );
																	console.log( error );
																	console.log( "Exiting now." );
																	process.exit( 1 );
																}
															}); // parser.init()


													}
												);

											}
										);
								}); // cmds.forEach
						}); // domains.forEach
				});// processinputArguments then
	}
);
