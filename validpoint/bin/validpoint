#!/usr/bin/env node

/**
 * CW website validator access hub.
 * 
 * Invoking: 
 * ./bin/validpoint command (-d [domain1,[domain2,[domain3...]]])
 * See all commands and options:
 * ./bin/validpoint help
 */

require( "strict-mode" )(
() =>
{
	// Get an instance of the runner
	const CW_Runner = require( "../dist/CW_Runner.js" );
	const runner = new CW_Runner();

	let async = require("../node_modules/async");

	const CW_Constants =  require( "../dist/CW_Constants.js" );
	const colors = require( "../node_modules/colors" );
	colors.setTheme( CW_Constants.COLOR_THEME );

	let domainCounter = 0;

	CW_Runner.processinputArguments()
		.then(
			( inputOptions ) =>
			{
				let cmds = inputOptions.command;
				let domains = CW_Runner.parseInputForDomains( { input: inputOptions } );

				async.eachSeries(
					domains,
					async ( domain ) =>
					{
						cmds = await CW_Runner.parseInputForCommands( {domain: domain, input: inputOptions, arrayIndex: domainCounter} );
						
						await CW_Runner.normalizeInput( {domain: domain, domains: domains, input: inputOptions} )
						.then(
							async (normalizedInput) =>
							{
								let runParameters = 
								{
									domain: normalizedInput.domain,
									commands: cmds,
									inputOptions: normalizedInput.input,
									optionIndex: domainCounter
								}
								domainCounter++;

								await CW_Runner.printDomainHeadline( {config: runParameters.inputOptions, domain: runParameters.domain} )
									.then(
										async (response) =>
										{
											// printDomainHeader always resolves 'true' so the response doesn't need to be parsed or displayed

											// Run commands form each domain
											await CW_Runner.domainCommandRunner( {input: runParameters } )
												.then(
													(response) =>
													{
														// console.log( "domainCommandRunner then" ); // We're not doing anything with the 'true' response
													}
												)
												.catch(
													(error) =>
													{
														console.log( "command runner error" ); // This should never catch
														console.log( error );
													}
												);
										}
									);
							}
						);
					}, // each series for domains
					(error) =>
					{
						// There are no errors received here, so this is only reached on completion
					});// end domains eachSeries final callback
			});  // end then() for processInputArguments()
}); // strict-mode container
